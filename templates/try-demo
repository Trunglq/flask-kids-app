from flask import Flask, render_template, request, redirect, url_for

app = Flask(__name__)

# Dữ liệu tĩnh: Các câu hỏi với 5 bước gợi mở và mẹo phụ huynh
hints_data = {
    "27 + 10": {
        "steps": [
            "Try breaking 10 into 10 and 0, then add to 27.",
            "Let’s add 10 to 27 step by step: Start with the tens place of 27, which is 20.",
            "If you have 27 candies, add 10, how many now?",
            "Add 10 to 20 to get 30, then add 7.",
            "Does 27 + 10 = 37? Try it!"
        ],
        "tip": "Ask your child: How does breaking 10 into 10 and 0 make adding easier?"
    },
    "15 + 8": {
        "steps": [
            "Can you split 8 into 5 and 3, then add to 15?",
            "What’s 15 + 5?",
            "If you have 15 candies, add 5, then 3 more, how many?",
            "Add 5 to 15 to get 20, then add 3.",
            "Does 15 + 8 = 23? Try it!"
        ],
        "tip": "Ask your child: Adding 8 is like adding 5 then 3, does that help?"
    },
    "42 - 7": {
        "steps": [
            "Try splitting 7 into 2 and 5, then subtract from 42.",
            "What’s 42 - 2?",
            "If you have 42 balloons, remove 2, then 5 more, how many left?",
            "Subtract 2 from 42 to get 40, then subtract 5.",
            "Does 42 - 7 = 35? Try it!"
        ],
        "tip": "Ask your child: Subtracting 7 is like removing 2 then 5, does that work?"
    },
    "20 + 24": {
        "steps": [
            "Try breaking 24 into 20 and 4, then add to 20.",
            "What’s 20 + 20?",
            "If you have 20 candies, add 20 more, then 4 more, how many?",
            "Add 20 to 20 to get 40, then add 4.",
            "Does 20 + 24 = 44? Try it!"
        ],
        "tip": "Ask your child: How does breaking 24 into 20 and 4 make adding easier?"
    },
    "30 - 12": {
        "steps": [
            "Try splitting 12 into 10 and 2, then subtract from 30.",
            "What’s 30 - 10?",
            "If you have 30 balloons, remove 10, then 2 more, how many left?",
            "Subtract 10 from 30 to get 20, then subtract 2.",
            "Does 30 - 12 = 18? Try it!"
        ],
        "tip": "Ask your child: Subtracting 12 is like removing 10 then 2, does that help?"
    }
}

# Hàm sinh gợi ý động cho phép cộng
def generate_addition_hints(num1, num2):
    steps = [
        f"Try breaking {num2} into {num2//10*10} and {num2%10}, then add to {num1}.",
        f"What’s {num1} + {num2//10*10}?",
        f"If you have {num1} candies, add {num2//10*10} more, then {num2%10} more, how many?",
        f"Add {num2//10*10} to {num1} to get {num1 + num2//10*10}, then add {num2%10}.",
        f"Does {num1} + {num2} = {num1 + num2}? Try it!"
    ]
    tip = f"Ask your child: How does breaking {num2} into {num2//10*10} and {num2%10} make adding easier?"
    return steps, tip

# Hàm sinh gợi ý động cho phép trừ
def generate_subtraction_hints(num1, num2):
    steps = [
        f"Try splitting {num2} into {num2//10*10} and {num2%10}, then subtract from {num1}.",
        f"What’s {num1} - {num2//10*10}?",
        f"If you have {num1} balloons, remove {num2//10*10}, then {num2%10} more, how many left?",
        f"Subtract {num2//10*10} from {num1} to get {num1 - num2//10*10}, then subtract {num2%10}.",
        f"Does {num1} - {num2} = {num1 - num2}? Try it!"
    ]
    tip = f"Ask your child: Subtracting {num2} is like removing {num2//10*10} then {num2%10}, does that help?"
    return steps, tip

# Biến lưu trạng thái cho màn Kids
current_step = 0
current_question = ""
dynamic_hints = None
current_tip = ""

# Biến lưu trạng thái cho Interactive Demo
demo_hint = "Enter a math problem to get a hint!"

@app.route("/", methods=["GET", "POST"])
def welcome():
    global demo_hint
    if request.method == "POST" and "demo_question" in request.form:
        question = request.form.get("demo_question", "").strip()
        if question in hints_data:
            demo_hint = hints_data[question]["steps"][0]
        else:
            try:
                parts = question.replace(" ", "").replace("=", "").split("+")
                if len(parts) == 2:
                    num1, num2 = int(parts[0]), int(parts[1])
                    hints, _ = generate_addition_hints(num1, num2)
                    demo_hint = hints[0]
                else:
                    parts = question.replace(" ", "").replace("=", "").split("-")
                    if len(parts) == 2:
                        num1, num2 = int(parts[0]), int(parts[1])
                        hints, _ = generate_subtraction_hints(num1, num2)
                        demo_hint = hints[0]
                    else:
                        demo_hint = "Sorry, I can only help with addition (+) or subtraction (-) problems."
            except ValueError:
                demo_hint = "Please enter a valid math problem (e.g., 20 + 24 or 30 - 12)."
        return render_template("welcome.html", demo_hint=demo_hint)
    return render_template("welcome.html", demo_hint=demo_hint)

@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        return redirect(url_for("role"))
    return render_template("login.html")

@app.route("/role", methods=["GET", "POST"])
def role():
    return render_template("role.html")

@app.route("/kids", methods=["GET", "POST"])
def kids():
    global current_step, current_question, dynamic_hints, current_tip
    hint = "Enter a math problem to get a hint!"
    tip = ""

    if request.method == "POST":
        action = request.form.get("action")
        question = request.form.get("question", "").strip()

        if action == "ask":
            current_question = question
            current_step = 0
            dynamic_hints = None
            current_tip = ""

            if question in hints_data:
                hint = hints_data[question]["steps"][0]
            else:
                try:
                    parts = question.replace(" ", "").replace("=", "").split("+")
                    if len(parts) == 2:
                        num1, num2 = int(parts[0]), int(parts[1])
                        dynamic_hints, _ = generate_addition_hints(num1, num2)
                        hint = dynamic_hints[0]
                    else:
                        parts = question.replace(" ", "").replace("=", "").split("-")
                        if len(parts) == 2:
                            num1, num2 = int(parts[0]), int(parts[1])
                            dynamic_hints, _ = generate_subtraction_hints(num1, num2)
                            hint = dynamic_hints[0]
                        else:
                            hint = "Sorry, I can only help with addition (+) or subtraction (-) problems."
                except ValueError:
                    hint = "Please enter a valid math problem (e.g., 20 + 24 or 30 - 12)."

        elif action == "not_yet":
            current_tip = ""
            if current_question in hints_data:
                if current_step < 4:
                    current_step += 1
                    hint = hints_data[current_question]["steps"][current_step]
                else:
                    hint = "That’s the last hint! Try solving it now."
            elif dynamic_hints:
                if current_step < 4:
                    current_step += 1
                    hint = dynamic_hints[current_step]
                else:
                    hint = "That’s the last hint! Try solving it now."
            else:
                hint = "Sorry, I don’t have a hint for this problem yet."

        elif action == "got_it":
            hint = "Great job!"
            current_step = 0
            dynamic_hints = None
            current_tip = ""

        elif action == "tips":
            if current_question in hints_data:
                current_tip = hints_data[current_question]["tip"]
            elif dynamic_hints:
                _, current_tip = generate_addition_hints(*map(int, current_question.replace(" ", "").split("+"))) if "+" in current_question else generate_subtraction_hints(*map(int, current_question.replace(" ", "").split("-")))
            else:
                current_tip = "No tip available for this problem."
            tip = current_tip

    return render_template("kids.html", hint=hint, tip=tip)

@app.route("/parent", methods=["GET", "POST"])
def parent():
    if request.method == "POST":
        return redirect(url_for("role"))
    return render_template("parent.html")

if __name__ == "__main__":
    app.run(debug=True)